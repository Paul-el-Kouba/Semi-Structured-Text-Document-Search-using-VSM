# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets 
from Processing import xml_to_dict 
from Processing import vectors 
from Processing import uniformize 
from Nierman import Begin 
from Similarities import jaccardSimilarity
from Similarities import cosineSimilarity
import shutil
from Similarities import PCC
from Similarities import manhattanSimilarity
from Similarities import euclideanSimilarity
from Similarities import diceSimilarity
from Querying import query, save_tf_df_index_pos
import xml.etree.ElementTree as ET  
import xml.dom.minidom 
import os 
import re

global styles
global fname_a
fname_a = ""
global fname_b
fname_b = ""
global selected_algorithm
selected_algorithm = "Cosine"
  
global g_similarity
g_similarity = "0"

global to_save
to_save = 0

global indexing
indexing = 1


styles= {"pressed-button": "font: 100000 13pt; color: #dddddd; background-color: #001414", 
         "unpressed-button": "color:#dddddd; font: 13pt; background-color: #303337",
         "calc-button": "background-color: #303337; font: 12pt; color: #FFFFDD",
         "up-button": "background-color: #303337; font: 11pt; color: #FFFFDD",
         "text": "font: 10pt",
         "directories": "font: 11pt; color: #000000; background-color: #D3D3D3",
         "check": "font: 12pt; color: #000000",
         "sim_report": "font: 12pt; color: white",
         "prints":"font:15pt;color:#000000",
         "dropBox": "font:14pt; color:#000000; background-color: #D3D3D3",
         "TextBox": "font:14pt; color:#000000; background-color:#D3D3D3"}


class Ui_MainWindow(object):
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(990, 640)
        MainWindow.setStyleSheet("background-color: #00CBCB")
        
        global styles
        global selected_algorithm 
        global g_similarity

        WIDTH = MainWindow.frameGeometry().width()
        HEIGHT = MainWindow.frameGeometry().height()
        
        TGL_H = HEIGHT / 8
        
        CALC_Y = HEIGHT - HEIGHT/2.5
        CALC_W = 250
        CALC_H = 50
        
        UP_W = 200
        UP_H = 50
        
        BOX_W = 200
        BOX_H = 60
        BOX_Y = HEIGHT/15 + 160
        
        LABEL_Y = BOX_Y - BOX_H/15
        
        DIR_Y = HEIGHT/15 + UP_W/8
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        #VSM
        self.similarity_toggle = QtWidgets.QPushButton(self.centralwidget)
        self.similarity_toggle.setGeometry(QtCore.QRect(0, 0, WIDTH/ 3, TGL_H))
        self.similarity_toggle.setCheckable(True)
        self.similarity_toggle.setObjectName("similarity_toggle")
        self.similarity_toggle.click() 
        self.similarity_toggle.clicked.connect(self.set_calc)
        self.similarity_toggle.setStyleSheet(styles["pressed-button"])
        

        #Query
        self.patcher_toggle = QtWidgets.QPushButton(self.centralwidget)
        self.patcher_toggle.setGeometry(QtCore.QRect(WIDTH/3, 0, WIDTH/ 3, TGL_H))
        self.patcher_toggle.setCheckable(True)
        self.patcher_toggle.setObjectName("patcher_toggle")
        self.patcher_toggle.clicked.connect(self.set_patch) 
        self.patcher_toggle.setStyleSheet(styles["unpressed-button"])

        #about
        self.about_toggle = QtWidgets.QPushButton(self.centralwidget)
        self.about_toggle.setGeometry(QtCore.QRect(2*WIDTH/3, 0, WIDTH/ 3, TGL_H))
        self.about_toggle.setCheckable(True)
        self.about_toggle.setObjectName("about_toggle")
        self.about_toggle.clicked.connect(self.set_about) 
        self.about_toggle.setStyleSheet(styles["unpressed-button"])

        #First Page
        self.similarity_frame = QtWidgets.QFrame(self.centralwidget)
        self.similarity_frame.setGeometry(QtCore.QRect(0, TGL_H, WIDTH, HEIGHT - TGL_H))
        self.similarity_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.similarity_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.similarity_frame.setObjectName("similarity_frame") 
        self.similarity_frame.setStyleSheet("color: #dddddd;")
        self.similarity_frame.show()
        
        #DropBox for Measure Choosing
        self.combobox1 = QtWidgets.QComboBox(self.similarity_frame)
        self.combobox1.setStyleSheet(styles["dropBox"])
        self.combobox1.setEditable(True)
        self.combobox1.setGeometry(QtCore.QRect((WIDTH/2)-70, (HEIGHT/2)-TGL_H-40, 200, TGL_H/1.5))
        self.combobox1.addItems(['Cosine', 'PCC', 'Manhattan', 'Euclidean', 'Jaccard', 'Dice', 'Nierman-Jagadish'])
        x = self.combobox1.lineEdit()
        x.setAlignment(QtCore.Qt.AlignCenter)
        x.setReadOnly(True)
        self.combobox1.currentTextChanged.connect(self.activated)
        
        #Checkbox
        self.checkBox_c = QtWidgets.QCheckBox(self.similarity_frame)
        self.checkBox_c.setGeometry(QtCore.QRect((WIDTH/2)-70, (HEIGHT/2)-TGL_H+15, 300, TGL_H/1.5))
        self.checkBox_c.stateChanged.connect(self.checkedc)
        self.checkBox_c.setStyleSheet(styles["check"])

        #Start Computing
        self.calculate = QtWidgets.QPushButton(self.similarity_frame)
        self.calculate.setGeometry(QtCore.QRect( (WIDTH/2)-70, (HEIGHT/2) , 200, TGL_H/1.5))
        self.calculate.setObjectName("calc_btn")
        self.calculate.setStyleSheet(styles["calc-button"])
        self.calculate.clicked.connect(self.calculate_fn)
        
        #Imported File 1 DIR
        self.file1_label = QtWidgets.QLabel(self.similarity_frame)
        self.file1_label.setGeometry(QtCore.QRect(WIDTH/6, HEIGHT/15 + 35, UP_W+10, UP_H+80))
        self.file1_label.setObjectName("file1_label")
        self.file1_label.setWordWrap(True)
        self.file1_label.setAlignment(QtCore.Qt.AlignCenter)
        self.file1_label.setStyleSheet(styles["directories"])

        #Imported File 2 DIR
        self.file2_label = QtWidgets.QLabel(self.similarity_frame)
        self.file2_label.setGeometry(QtCore.QRect(4*WIDTH/6, HEIGHT/15 + 35, UP_W+10, UP_H+80))
        self.file2_label.setObjectName("file2_label")
        self.file2_label.setWordWrap(True)
        self.file2_label.setAlignment(QtCore.Qt.AlignCenter)
        self.file2_label.setStyleSheet(styles["directories"])
        
        #Import File 1 Btn
        self.up_btn1 = QtWidgets.QPushButton(self.similarity_frame)
        self.up_btn1.setGeometry(QtCore.QRect(WIDTH/6, HEIGHT/15 -10, UP_W+10, UP_H-5))
        self.up_btn1.setObjectName("up_btn1")
        self.up_btn1.clicked.connect(self.file_a)
        self.up_btn1.setStyleSheet(styles["up-button"])

        #Import File 2 Btn
        self.up_btn2 = QtWidgets.QPushButton(self.similarity_frame)
        self.up_btn2.setGeometry(QtCore.QRect(4*WIDTH/6, HEIGHT/15 -10 , UP_W+10, UP_H-5))
        self.up_btn2.setObjectName("up_btn2")
        self.up_btn2.clicked.connect(self.file_b)
        self.up_btn2.setStyleSheet(styles["up-button"])
         
        #Measure Chosen
        self.measure_text = QtWidgets.QLabel(self.similarity_frame)
        self.measure_text.setText("Measure: " + selected_algorithm)
        self.measure_text.setGeometry(QtCore.QRect(WIDTH/8, (HEIGHT/2)+25, UP_W, UP_H))
        self.measure_text.setStyleSheet(styles["prints"]) 
               
        #Similarity       
        self.similarity_text = QtWidgets.QLabel(self.similarity_frame)
        self.similarity_text.setText("Similarity: " + g_similarity)
        self.similarity_text.setGeometry(QtCore.QRect(WIDTH/8, (HEIGHT/2)+75, UP_W, UP_H))
        self.similarity_text.setStyleSheet(styles["prints"])  
        
      
        
        #Second page  
        self.query_frame = QtWidgets.QFrame(self.centralwidget)
        self.query_frame.setGeometry(QtCore.QRect(0, TGL_H, WIDTH, HEIGHT - TGL_H))
        self.query_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.query_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.query_frame.setObjectName("query_frame") 
        self.query_frame.setStyleSheet("color: #dddddd;")
        self.query_frame.hide()

        #Textbox for Querying
        self.query_tb = QtWidgets.QLineEdit(self.query_frame)
        self.query_tb.setGeometry(QtCore.QRect(WIDTH/2 -175, HEIGHT/15-10, 350, 60))
        self.query_tb.setObjectName("query_tb") 
        self.query_tb.setAlignment(QtCore.Qt.AlignCenter)
        self.query_tb.setStyleSheet(styles["TextBox"])
        
        #Text for Querying
        self.query_lb = QtWidgets.QLabel(self.query_frame)
        self.query_lb.setGeometry(QtCore.QRect(WIDTH/8+135, HEIGHT/15+60, 350, 60))
        self.query_lb.setText("Do You Want To Use Indexing?")
        self.query_lb.setObjectName("query_lb") 
        self.query_lb.setWordWrap(True)
        self.query_lb.setAlignment(QtCore.Qt.AlignCenter)
        self.query_lb.setStyleSheet(styles["prints"])
        
        #RadioButton for Indexing
        self.radioButton_yes = QtWidgets.QRadioButton(self.query_frame)
        self.radioButton_yes.setGeometry(QtCore.QRect(WIDTH/8+470, HEIGHT/15+50, 150, 80))
        self.radioButton_yes.setStyleSheet(styles["prints"]) 
        self.radioButton_yes.toggled.connect(self.yes_Selected)

        self.radioButton_no = QtWidgets.QRadioButton(self.query_frame)
        self.radioButton_no.setGeometry(QtCore.QRect(WIDTH/8+550, HEIGHT/15+50, 150, 80))
        self.radioButton_no.setStyleSheet(styles["prints"]) 
        self.radioButton_no.toggled.connect(self.no_Selected)
         
        self.query = QtWidgets.QPushButton(self.query_frame)
        self.query.setGeometry(QtCore.QRect( (WIDTH/2)-100, (HEIGHT/3)-50 , 200, TGL_H/1.5))
        self.query.setObjectName("query_btn")
        self.query.setStyleSheet(styles["calc-button"])
        self.query.clicked.connect(self.query_btn)

                #Text for Querying
        self.query_lb1 = QtWidgets.QLabel(self.query_frame)
        self.query_lb1.setGeometry(QtCore.QRect(WIDTH/8, (HEIGHT/3)+50, 750, 50))
        self.query_lb1.setText("Doc1: ")
        self.query_lb1.setObjectName("query_lb") 
        self.query_lb1.setWordWrap(True) 
        self.query_lb1.setStyleSheet(styles["prints"])

        self.query_lb2 = QtWidgets.QLabel(self.query_frame)
        self.query_lb2.setGeometry(QtCore.QRect(WIDTH/8, (HEIGHT/3)+100, 750, 50))
        self.query_lb2.setText("Doc2: ")
        self.query_lb2.setObjectName("query_lb") 
        self.query_lb2.setWordWrap(True) 
        self.query_lb2.setStyleSheet(styles["prints"])

        self.query_lb3 = QtWidgets.QLabel(self.query_frame)
        self.query_lb3.setGeometry(QtCore.QRect(WIDTH/8, (HEIGHT/3)+150, 750, 50))
        self.query_lb3.setText("Doc3: ")
        self.query_lb3.setObjectName("query_lb") 
        self.query_lb3.setWordWrap(True) 
        self.query_lb3.setStyleSheet(styles["prints"])

        self.query_lb4 = QtWidgets.QLabel(self.query_frame)
        self.query_lb4.setGeometry(QtCore.QRect(WIDTH/8, (HEIGHT/3)+200, 750, 50))
        self.query_lb4.setText("Doc4: ")
        self.query_lb4.setObjectName("query_lb") 
        self.query_lb4.setWordWrap(True) 
        self.query_lb4.setStyleSheet(styles["prints"])

        self.query_lb5 = QtWidgets.QLabel(self.query_frame)
        self.query_lb5.setGeometry(QtCore.QRect(WIDTH/8, (HEIGHT/3)+250, 750, 50))
        self.query_lb5.setText("Doc5: ")
        self.query_lb5.setObjectName("query_lb") 
        self.query_lb5.setWordWrap(True) 
        self.query_lb5.setStyleSheet(styles["prints"])

        #Third Page 
        self.about_frame = QtWidgets.QFrame(self.centralwidget)
        self.about_frame.setGeometry(QtCore.QRect(0, TGL_H, WIDTH, HEIGHT - TGL_H))
        self.about_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.about_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.about_frame.setObjectName("about_frame") 
        self.about_frame.setStyleSheet("color: #dddddd;")
        self.about_frame.hide()

        #VSM vs SET
        self.about_lb1 = QtWidgets.QLabel(self.about_frame)
        self.about_lb1.setGeometry(QtCore.QRect(WIDTH/2-375, (HEIGHT/20), 750, 50))
        self.about_lb1.setText("Comparing Set Based and Vector Base Models, The Vector based models are way faster as can be seen in the following graph:")
        self.about_lb1.setObjectName("about_lb1")
        self.about_lb1.setAlignment(QtCore.Qt.AlignCenter) 
        self.about_lb1.setWordWrap(True) 
        self.about_lb1.setStyleSheet(styles["prints"])

        #Comparison Graph
        self.label = QtWidgets.QLabel(self.about_frame)
        self.pixmap = QtGui .QPixmap('graph.png')
        self.label.setPixmap(self.pixmap)
        self.label.resize(self.pixmap.width(),
                          self.pixmap.height())
        self.label.setGeometry(QtCore.QRect((WIDTH/2)-(self.pixmap.width()/2), (HEIGHT/2)-(self.pixmap.height()/2), self.pixmap.width(), self.pixmap.height()))

        #error emssages
        self.msg = QtWidgets.QMessageBox()
        self.msg.setWindowTitle("Invalid Files")
        self.msg.setText("Please choose two files first")
        self.msg.setIcon(QtWidgets.QMessageBox.Critical)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def checkedc(self, checked):
        global to_save
        if checked:
            to_save = 1
        else:
            to_save = 0

    def query_btn(self):
        global indexing
        q = self.query_tb.text()
        l = query(q, 0, indexing)
        for i in range (len(l)):
            if(i==0):
                self.query_lb1.setText("Doc 1: " + l[i][0] + "          Sim: " + str(l[i][1]))
            elif(i==1):
                self.query_lb2.setText("Doc 2: " + l[i][0] + "          Sim: " + str(l[i][1]))
            elif(i==2):
                self.query_lb3.setText("Doc 3: " + l[i][0] + "          Sim: " + str(l[i][1]))
            elif(i==3):
                self.query_lb4.setText("Doc 4: " + l[i][0] + "          Sim: " + str(l[i][1]))
            elif(i==4):
                self.query_lb5.setText("Doc 5: " + l[i][0] + "          Sim: " + str(l[i][1]))
            else:
                break
        if(len(l) < 5):   
            for i in range(5-len(l)):
                if(4-i == 4): 
                    self.query_lb5.setText("Doc 5: X")
                elif(4-i ==3):
                    self.query_lb4.setText("Doc 4: X")
                elif(4-i ==2):
                    self.query_lb3.setText("Doc 3: X")
                elif(4-i ==1):
                    self.query_lb2.setText("Doc 2: X")
                elif(4-i ==0):
                    self.query_lb1.setText("Doc 1: X")

    def yes_Selected(self):
        global indexing
        indexing = 1
    
    def no_Selected(self):
        global indexing
        indexing = 0

    def set_calc(self):
            global styles

            if self.similarity_toggle.isChecked():
                #switch the styles of the buttons
                self.similarity_toggle.setStyleSheet(styles["pressed-button"])
                self.patcher_toggle.setStyleSheet(styles["unpressed-button"])
                self.about_toggle.setStyleSheet(styles["unpressed-button"])
                
                #uncheck the other if checked
                if self.patcher_toggle.isChecked():
                    self.patcher_toggle.setChecked(False) 
                if self.about_toggle.isChecked():
                    self.about_toggle.setChecked(False)
                
                #change frame
                self.similarity_frame.show()
                self.query_frame.hide()
                self.about_frame.hide()
                
            else:
                self.similarity_toggle.setStyleSheet(styles["unpressed-button"])

    def set_about(self):
            global styles

            if self.about_toggle.isChecked():
                #switch the styles of the buttons
                self.about_toggle.setStyleSheet(styles["pressed-button"])
                self.similarity_toggle.setStyleSheet(styles["unpressed-button"])
                self.patcher_toggle.setStyleSheet(styles["unpressed-button"])
                
                #uncheck the other if checked
                if self.patcher_toggle.isChecked():
                    self.patcher_toggle.setChecked(False)     
                if self.similarity_toggle.isChecked():
                    self.similarity_toggle.setChecked(False)
                
                #change frame
                self.about_frame.show()
                self.similarity_frame.hide()
                self.query_frame.hide()
                
            else:
                self.about_toggle.setStyleSheet(styles["unpressed-button"])               

    def set_patch(self):
        global styles

        if self.patcher_toggle.isChecked():
            #switch the styles of the buttons
            self.patcher_toggle.setStyleSheet(styles["pressed-button"])
            self.similarity_toggle.setStyleSheet(styles["unpressed-button"])
            self.about_toggle.setStyleSheet(styles["unpressed-button"])

            #uncheck the other if checked
            if self.similarity_toggle.isChecked():
                self.similarity_toggle.setChecked(False)
            if self.about_toggle.isChecked():
                self.about_toggle.setChecked(False)
                
            #change_frame
            self.query_frame.show()
            self.similarity_frame.hide()
            self.about_frame.hide()

        else:
            self.patcher_toggle.setStyleSheet(styles["unpressed-button"])

    def activated(self,s):
        global selected_algorithm
        selected_algorithm = s
        self.measure_text.setText("Measure: " + selected_algorithm) 

    def file_a(self):
        global fname_a
        #the fn below returns tuple with name and ext; we take the directory only
        fname_a = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "Open File", ".", "XML files (*.xml *.txt)")[0]
        self.file1_label.setText(fname_a)

    def file_b(self):
        global fname_b
        fname_b = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "Open File", ".", "XML files (*.xml *.txt)")[0]
        self.file2_label.setText(fname_b)
             
    def input_validate(self):
        global fname_a
        global fname_b
        if not (fname_a and fname_b):
            self.msg.exec()
            return False
        return True
            
    def calculate_fn(self):
        global fname_a
        global fname_b
        global selected_algorithm
        global to_save
        global g_similarity
        global g_distance 
        
        if(to_save == 1):
            src1 = fname_a
            src2 = fname_b
            files = os.listdir("C:\\Users\\Paulk\\Desktop\\IDPA PROJ2\\Guy\\test_docs")
            maxn = 0
            for file in files:
                num = int(re.search('D(\d*)', file).group(1))  # assuming filename is "filexxx.txt"
                # compare num to previous max, e.g.
                maxn = num if num > maxn else maxn
            dest1 = "C:\\Users\\Paulk\\Desktop\\IDPA PROJ2\\Guy\\test_docs\\D"+str(int(maxn+1))+".xml"
            dest2 = "C:\\Users\\Paulk\\Desktop\\IDPA PROJ2\\Guy\\test_docs\\D"+str(int(maxn+2))+".xml"
            shutil.copy(src1, dest1)
            shutil.copy(src2, dest2)
        
        if self.input_validate():
            #load files 
            a = ET.parse(fname_a)
            roota = a.getroot()
            b = ET.parse(fname_b)
            rootb = b.getroot()
            
            #run xml_to_dict
            dic_a = {}
            xml_to_dict(roota, dic_a)
            dic_b = {}
            xml_to_dict(rootb, dic_b)
 
            #run the algorithm
            if(selected_algorithm != 'Nierman-Jagadish'):
                vector1 = vectors(dic_a)
                vector2 = vectors(dic_b)

                v1, v2, m = uniformize(vector1["0"], vector2["0"])

                if(selected_algorithm == 'Cosine'):
                    g_similarity = cosineSimilarity(v1, v2) 
                elif(selected_algorithm == 'PCC'):
                    g_similarity = PCC(v1, v2) 
                elif(selected_algorithm == 'Manhattan'):
                    g_similarity = manhattanSimilarity(v1, v2)
                elif(selected_algorithm == 'Euclidean'):
                    g_similarity = euclideanSimilarity(v1, v2)
                elif(selected_algorithm == 'Jaccard'):
                    g_similarity = jaccardSimilarity(v1, v2)
                elif(selected_algorithm == 'Dice'):
                    g_similarity = diceSimilarity(v1, v2)  
            else: 
                g_similarity = Begin(dic_a, dic_b)

            self.similarity_text.setText("Similarity: " + str(g_similarity))
             
 
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Vector Space Models"))
        self.similarity_toggle.setText(_translate("MainWindow", "VSM"))
        self.patcher_toggle.setText(_translate("MainWindow", "Query"))
        self.about_toggle.setText(_translate("MainWindow", "About")) 
        self.up_btn1.setText(_translate("MainWindow", "Select File A"))
        self.up_btn2.setText(_translate("MainWindow", "Select File B"))
        self.radioButton_yes.setText(_translate("MainWindow", "Yes"))
        self.radioButton_no.setText(_translate("MainWindow", "No"))
        self.calculate.setText(_translate("MainWindow", "Compute Similarity"))
        self.query.setText(_translate("MainWindow", "Query Input"))
        self.checkBox_c.setText(_translate("MainWindow", "Save Files In Collection"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
